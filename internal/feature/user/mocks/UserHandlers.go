// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/Sanchir01/users-info/internal/feature/user"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserHandlers is an autogenerated mock type for the UserHandlers type
type UserHandlers struct {
	mock.Mock
}

// CreateUserService provides a mock function with given fields: name, surname, patronymic, ctx
func (_m *UserHandlers) CreateUserService(name string, surname string, patronymic string, ctx context.Context) error {
	ret := _m.Called(name, surname, patronymic, ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, context.Context) error); ok {
		r0 = rf(name, surname, patronymic, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserByID provides a mock function with given fields: ctx, id
func (_m *UserHandlers) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: ctx, page, pageSize, minAge, maxAge
func (_m *UserHandlers) GetAllUsers(ctx context.Context, page uint, pageSize uint, minAge *int, maxAge *int) ([]*user.UserDB, error) {
	ret := _m.Called(ctx, page, pageSize, minAge, maxAge)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []*user.UserDB
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, *int, *int) ([]*user.UserDB, error)); ok {
		return rf(ctx, page, pageSize, minAge, maxAge)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, *int, *int) []*user.UserDB); ok {
		r0 = rf(ctx, page, pageSize, minAge, maxAge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*user.UserDB)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, uint, *int, *int) error); ok {
		r1 = rf(ctx, page, pageSize, minAge, maxAge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, id, name, surname, patronymic
func (_m *UserHandlers) UpdateUser(ctx context.Context, id uuid.UUID, name string, surname string, patronymic string) error {
	ret := _m.Called(ctx, id, name, surname, patronymic)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, string) error); ok {
		r0 = rf(ctx, id, name, surname, patronymic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserHandlers creates a new instance of UserHandlers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserHandlers(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserHandlers {
	mock := &UserHandlers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
